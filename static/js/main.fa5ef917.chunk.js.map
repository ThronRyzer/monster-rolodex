{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","onSearchChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACrB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHjBC,G,MAAW,SAACR,GACrB,OAAO,sBAAKC,UAAU,YAAf,cACHD,EAAMS,SAASC,KAAI,SAAAN,GACf,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,YCLzBM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCsCPG,E,kDAzCb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAgBRiB,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALE,E,qDAUnB,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MACjC,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAQzC,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAIlD,OACE,sBAAK/B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAcgB,KAAKZ,iBAErB,cAAC,EAAD,CAAUR,SAAUqB,W,GApCVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fa5ef917.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css'\n\nexport const Card = props => {\n    return (\n        <div className='card-container'>\n            <img alt=\"monser\" src={`https://robohash.org/${props.monster.id}?set=set2`}></img>\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    );\n};\n","import React from 'react';\nimport { Card } from '../card/card.component'\n\n\nimport './card-list.styles.css'\n\nexport const CardList = (props) => {\n    return <div className='card-list'> {\n        props.monsters.map(monster => {\n            return <Card key={monster.id} monster={monster} />\n        })\n    }</div>\n}\n\n","import React from 'react';\n\nimport './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n    return (\n        <input\n            className=\"search\"\n            type='search'\n            placeholder={placeholder}\n            onChange={handleChange}\n        />\n    );\n};\n\n","import { Component } from 'react'\nimport './App.css';\n\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json()).then(\n        users => this.setState({ monsters: users })\n      )\n  }\n\n  onSearchChange = e => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox\n          placeholder='Search Monsters'\n          handleChange={this.onSearchChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div >\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}